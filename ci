#!/bin/bash -ex

# Build the 'lite' docker image for an SBT version.
# This is just an Alpine image with JDK 8 and SBT.
# Will publish if the branch is master.
build_lite_docker_image() {
  local sbt_version="$1"

  docker build . \
    -f Dockerfile.lite \
    -t jrouly/sbt:$sbt_version \
    --build-arg SBT_VERSION=$sbt_version

  if [[ "$GIT_BRANCH" == "master" ]] ; then
    docker push jrouly/sbt:$sbt_version
  fi
}

generate_fake_project() {
  local base_dir="$1"
  local sbt_version="$2"

  pushd .
  local project_dir="$base_dir/sbt-$sbt_version"
  mkdir -p "$project_dir"
  cd "$project_dir"
  mkdir project
  echo "sbt.version = $sbt_version" > project/build.properties
  popd
}

build_preloaded_docker_image() {
  local sbt_version="$1"
  local project_dir="$2"

  docker build . \
    -f Dockerfile.preload \
    -t jrouly/sbt:$sbt_version-preloaded \
    --build-arg PROJECT_ROOT=$project_dir \
    --build-arg SBT_VERSION=$sbt_version

  if [[ "$GIT_BRANCH" == "master" ]] ; then
    docker push jrouly/sbt:$sbt_version-preloaded
  fi
}

build_preloaded() {
  # Clean up fake projects.
  rm -rf ${project_dir_prefix}*

  # Create fake projects.
  for version in $versions ; do
    local project_dir="$project_dir_prefix$version"
    mkdir -p "$project_dir"

    for project_version in $versions ; do
      generate_fake_project "$project_dir" "$project_version"
    done
  done

  ls ${project_dir_prefix}*

  # Build docker images.
  for version in $versions ; do
    local project_dir="$project_dir_prefix$version"
    build_preloaded_docker_image $version $project_dir
  done

  # Clean up fake projects.
  rm -rf ${project_dir_prefix}*
}

main() {
  local project_dir_prefix="projects/sbt-"
  local versions=$(cat versions)

  # Build lite docker images.
  for version in $versions ; do
    build_lite_docker_image $version
  done

  # If build_preloaded is set, build preloaded images as well.
  if [[ "$build_preloaded" == "true" ]] ; then
    build_preloaded
  fi
}

main "$@"
